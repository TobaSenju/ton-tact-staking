;;
;; Header files for StakingContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; $PassScoreToRoundContract$_store
builder $PassScoreToRoundContract$_store(builder build_0, (slice, int) v) inline;

;; $PassScoreToRoundContract$_store_cell
cell $PassScoreToRoundContract$_store_cell((slice, int) v) inline;

;; $StakeRecord$_store
builder $StakeRecord$_store(builder build_0, (slice, int, int) v) inline;

;; $StakeRecord$_store_cell
cell $StakeRecord$_store_cell((slice, int, int) v) inline;

;; $StakeRecord$_not_null
((slice, int, int)) $StakeRecord$_not_null(tuple v) inline;

;; $StakeRecord$_store_opt
cell $StakeRecord$_store_opt(tuple v) inline;

;; $StakeRecord$_load
(slice, ((slice, int, int))) $StakeRecord$_load(slice sc_0) inline;

;; $StakeRecord$_as_optional
tuple $StakeRecord$_as_optional((slice, int, int) v) inline;

;; $StakeRecord$_load_opt
tuple $StakeRecord$_load_opt(cell cl) inline;

;; $TransferEvent$_store
builder $TransferEvent$_store(builder build_0, (slice, int, int) v) inline;

;; $TransferEvent$_store_cell
cell $TransferEvent$_store_cell((slice, int, int) v) inline;

;; $Unstake$_load
(slice, ((int))) $Unstake$_load(slice sc_0) inline;

;; $GetWeighted$_load
(slice, ((slice))) $GetWeighted$_load(slice sc_0) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $StakingContract$_store
builder $StakingContract$_store(builder build_0, (slice, slice, int, cell, cell, int, int, int) v) inline;

;; $StakingContract$_load
(slice, ((slice, slice, int, cell, cell, int, int, int))) $StakingContract$_load(slice sc_0) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $StakingData$_to_external
(int, slice, int, int) $StakingData$_to_external(((int, slice, int, int)) v) inline;

;; $StakingContract$init$_load
(slice, ((slice, int))) $StakingContract$init$_load(slice sc_0) inline;

;; $StakingContract$_contract_init
(slice, slice, int, cell, cell, int, int, int) $StakingContract$_contract_init(slice $_owner, int $_parameter) impure inline_ref;

;; $StakingContract$_contract_load
(slice, slice, int, cell, cell, int, int, int) $StakingContract$_contract_load() impure inline_ref;

;; $StakingContract$_contract_store
() $StakingContract$_contract_store((slice, slice, int, cell, cell, int, int, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $StakingContract$_fun_durationTime
((slice, slice, int, cell, cell, int, int, int), int) $StakingContract$_fun_durationTime((slice, slice, int, cell, cell, int, int, int) $self) impure inline_ref;

;; $StakingContract$_fun_score_function
((slice, slice, int, cell, cell, int, int, int), int) $StakingContract$_fun_score_function((slice, slice, int, cell, cell, int, int, int) $self, int $jetton_amount) impure inline_ref;

;; $StakingContract$_fun_get_user_stake_record
((slice, slice, int, cell, cell, int, int, int), cell) $StakingContract$_fun_get_user_stake_record((slice, slice, int, cell, cell, int, int, int) $self) impure inline_ref;

;; $StakingContract$_fun_get_user_stake_amount
((slice, slice, int, cell, cell, int, int, int), cell) $StakingContract$_fun_get_user_stake_amount((slice, slice, int, cell, cell, int, int, int) $self) impure inline_ref;

;; $StakingData$_constructor_index_this_contract_jettonWallet_total_score_parameter
((int, slice, int, int)) $StakingData$_constructor_index_this_contract_jettonWallet_total_score_parameter(int index, slice this_contract_jettonWallet, int total_score, int parameter) inline;

;; $StakingContract$_fun_get_return_staking_data
((slice, slice, int, cell, cell, int, int, int), (int, slice, int, int)) $StakingContract$_fun_get_return_staking_data((slice, slice, int, cell, cell, int, int, int) $self) impure inline_ref;

;; $StakeRecord$_constructor_stake_address_jettonStakeAmount_score
((slice, int, int)) $StakeRecord$_constructor_stake_address_jettonStakeAmount_score(slice stake_address, int jettonStakeAmount, int score) inline;

;; $TransferEvent$_constructor_sender_address_jetton_amount_score
((slice, int, int)) $TransferEvent$_constructor_sender_address_jetton_amount_score(slice sender_address, int jetton_amount, int score) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $PassScoreToRoundContract$_constructor_checked_address_return_score
((slice, int)) $PassScoreToRoundContract$_constructor_checked_address_return_score(slice checked_address, int return_score) inline;

;; $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;
